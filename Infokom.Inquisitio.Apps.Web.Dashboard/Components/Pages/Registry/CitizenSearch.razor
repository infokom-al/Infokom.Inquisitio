@page "/Registry/Citizens"

@inherits EntitySearch<RegistryDbContext, long, Citizen, CitizenFilter>

<PageTitle>@this.Title</PageTitle>

<Card>
	<CardHeader>

		<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 row-cols-xxl-5 g-2">
			<div class="col">
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="@Filter.GivenName" />
					<label>Emri</label>
				</div>
			</div>
			<div class="col">
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="@Filter.FamilyName" />
					<label>Mbiemri</label>
				</div>
			</div>
			<div class="col">
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="@Filter.FatherName" />
					<label>Atësia</label>
				</div>
			</div>
			<div class="col">
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="@Filter.MotherName" />
					<label>Amësia</label>
				</div>
			</div>
			<div class="col">
				<div class="form-floating">
					<DateInput Class="form-control" TValue="DateOnly?" @bind-Value="Filter.BirthDate" />
					<label>Datelindja</label>
				</div>
			</div>
		</div>
		<hr />
		<div class="d-grid d-lg-block gap-2 justify-content-end">
			<Button Color="ButtonColor.Primary" @onclick="Search"> Kerko </Button>
			<Button Color="ButtonColor.Danger" @onclick="Clear"> Anullo </Button>
		</div>
	</CardHeader>
	<CardBody>

		<Grid @ref="Grid" Class="table table-hover table-bordered table-striped" AllowFiltering="false" AllowPaging="true"
		TItem="Citizen"
		DataProvider="async (request) => await request.ApplyToAsync(this.Query)">

			<GridColumns>
				<GridColumn TItem="Citizen" HeaderText="Emer" PropertyName="GivenName" Sortable="true">
					@context.GivenName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Mbiemer" PropertyName="FamilyName" Sortable="true">
					@context.FamilyName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Atesi" PropertyName="FatherName">
					@context.FatherName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Amesi" PropertyName="MotherName">
					@context.MotherName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Datelindje" PropertyName="BirthDate" Sortable="true" SortDirection="SortDirection.Ascending">
					@context.BirthDate
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Vendlindje" PropertyName="BirthPlace">
					@context.BirthPlace
				</GridColumn>
				<GridColumn TItem="Citizen">
					<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await ShowCitizen(context.Id)">
						<Icon Name="IconName.Person"></Icon>
					</Button>
					<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await ShowFamily(context.Id)">
						<Icon Name="IconName.People"></Icon>
					</Button>
				</GridColumn>
			</GridColumns>

		</Grid>
	</CardBody>
</Card>

<Modal @ref="Modal" ModalType="ModalType.Primary" Size="ModalSize.ExtraLarge" IsScrollable="true" ShowCloseButton="false">

</Modal>

@code {
	
	protected override string Title => "Regjistri i Gjendjes Civile (Nentor 2008) ver. 1.4";
	protected override string Excerpt => "";




	private Modal Modal { get; set; } = default!;



	private async Task ShowCitizen(long citizenId)
	{
		this.PreloadService.Show();

		try
		{

			var citizenName = await this.Context.Citizens.Where(x => x.Id == citizenId).Select(x => x.GivenName + " " + x.FamilyName).FirstOrDefaultAsync();

			if (citizenName != null)
			{
				await Modal.ShowAsync<CitizenDetails>(citizenName.ToUpperInvariant(), null, new Dictionary<string, object>()
				{
					{ "Id", citizenId }
				});
			}
		}
		catch (Exception ex)
		{
			this.ToastService.Notify(new ToastMessage(ToastType.Danger, "ERROR", ex.Message));
		}

		this.PreloadService.Hide();

	}

	private async Task ShowFamily(long citizenId)
	{

		this.PreloadService.Show();

		try
		{

			var citizenName = await this.Context.Citizens.Where(x => x.Id == citizenId).Select(x => x.GivenName + " " + x.FamilyName).FirstOrDefaultAsync();

			var familyId = await this.Context.Families.Where(f => f.Members.Any(m => m.Id == citizenId)).Select(f => f.Id).SingleOrDefaultAsync();



			if (familyId != default)
			{
				await Modal.ShowAsync<FamilyDetails>(citizenName.ToUpperInvariant(), null, new Dictionary<string, object>()
				{
					{ "Id", familyId }
				});
			}
		}
		catch (Exception ex)
		{
			this.ToastService.Notify(new ToastMessage(ToastType.Danger, "ERROR", ex.Message));
		}

		this.PreloadService.Hide();

		
	}
}
