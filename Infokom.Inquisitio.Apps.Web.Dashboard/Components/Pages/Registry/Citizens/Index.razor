@page "/Registry/Citizens"
@using Infokom.Inquisitio.Application.FIlters.Registry

@inject NavigationManager NavigationManager
@inject IRegistryService RegistryService

<PageTitle>@PAGE_TITLE</PageTitle>

<h1>@PAGE_TITLE</h1>

<p>
	<a href="citizens/create">Create New</a>
</p>

<Card>
	<CardHeader>
		<div class="container">
			<div class="row">
				<div class="col-lg-3 mb-3">
					<label for="Filter.GivenName">Emri</label>
					<InputText @bind-Value="@Filter.GivenName" class="form-control" />
					<div class="invalid-feedback">
						Valid first name is required.
					</div>
				</div>
				<div class="col-lg-3 mb-3">
					<label for="Filter.FamilyName">Mbiemri</label>
					<InputText @bind-Value="@Filter.FamilyName" class="form-control" />
					<div class="invalid-feedback">
						Valid last name is required.
					</div>
				</div>
				<div class="col-lg-3 mb-3">
					<label for="Filter.FatherName">Mbiemri</label>
					<InputText @bind-Value="@Filter.FatherName" class="form-control" />
					<div class="invalid-feedback">
						Valid last name is required.
					</div>
				</div>
				<div class="col-lg-3 mb-3">
					<label for="Filter.MotherName">Amesia</label>
					<InputText @bind-Value="@Filter.MotherName" class="form-control" />
					<div class="invalid-feedback">
						Valid last name is required.
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-lg-3 mb-3">
					<label for="lastName">Datelinjda</label>
					<DateInput TValue="DateOnly?" @bind-Value="@Filter.BirthDate" class="form-control" />
					<div class="invalid-feedback"></div>
				</div>
			</div>
			<hr />
			<div class="d-flex flex-row gap-2 justify-content-end">
				<Button Color="ButtonColor.Primary" @onclick="Search"> Kerko </Button>
				<Button Color="ButtonColor.Danger" @onclick="Clear"> Anullo </Button>
			</div>
		</div>
	</CardHeader>
	<CardBody>
		<Grid @ref="Grid" Class="table table-hover table-bordered table-striped" TItem="Citizen" DataProvider="CitizenDataProvider"
		AllowDetailView="true"
		AllowSorting="true"
		AllowFiltering="false"
		AllowPaging="true" PageSize="10">

			<GridColumns>
				<GridColumn TItem="Citizen" HeaderText="Emer" PropertyName="GivenName" Sortable="true">
					@context.GivenName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Mbiemer" PropertyName="FamilyName" Sortable="true">
					@context.FamilyName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Atesi" PropertyName="FatherName">
					@context.FatherName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Amesi" PropertyName="MotherName">
					@context.MotherName
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Datelindje" PropertyName="BirthDate" Sortable="true" SortDirection="SortDirection.Ascending">
					@context.BirthDate
				</GridColumn>
				<GridColumn TItem="Citizen" HeaderText="Vendlindje" PropertyName="BirthPlace">
					@context.BirthPlace
				</GridColumn>
				<GridColumn TItem="Citizen">
					<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await ShowCitizen(context.Id)">
						<Icon Name="IconName.Person"></Icon>
					</Button>
					<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await ShowFamily(context.Id)">
						<Icon Name="IconName.People"></Icon>
					</Button>
				</GridColumn>
			</GridColumns>

			<GridDetailView TItem="Citizen">
				<Detail Citizen="context"></Detail>
			</GridDetailView>
		</Grid>
	</CardBody>
</Card>

<Modal @ref="citizenModal" ModalType="ModalType.Info" Size="ModalSize.Large">

</Modal>

<Modal @ref="familyModal" ModalType="ModalType.Info" Size="ModalSize.Large">

</Modal>

@code {
	private const string PAGE_TITLE = "Regjistri i Gjendjes Civile (Nentor 2008) ver. 1.4";

	Modal citizenModal = default;
	Modal familyModal = default;

	CitizenFilter Filter { get; set; }





	[Inject] ModalService ModalService { get; set; }


	private Grid<Citizen> Grid { get; set; } = default;



	private IQueryable<Citizen> Items { get; set; }

	protected override void OnInitialized()
	{
		this.Filter = new CitizenFilter();
	}


	private async Task<GridDataProviderResult<Citizen>> CitizenDataProvider(GridDataProviderRequest<Citizen> request)
	{
		var query = this.Items;

		var result = await request.ApplyToAsync(query);


		return result;
	}

	private async Task Search()
	{
		var query = this.RegistryService.Citizens;

		if (!string.IsNullOrEmpty(Filter.GivenName))
			query = query.Where(x => EF.Functions.Like(x.GivenName, $"{Filter.GivenName}%"));

		if (!string.IsNullOrEmpty(Filter.FamilyName))
			query = query.Where(x => EF.Functions.Like(x.FamilyName, $"{Filter.FamilyName}%"));

		if (!string.IsNullOrEmpty(Filter.FatherName))
			query = query.Where(x => EF.Functions.Like(x.FatherName, $"{Filter.FatherName}%"));

		if (!string.IsNullOrEmpty(Filter.MotherName))
			query = query.Where(x => EF.Functions.Like(x.MotherName, $"{Filter.MotherName}%"));

		if (Filter.BirthDate.HasValue)
			query = query.Where(x => EF.Functions.DateDiffDay(x.BirthDate, Filter.BirthDate) == 0);

		this.Items = query;

		await Grid.RefreshDataAsync();
	}


	private async Task Clear()
	{
		this.Filter = new CitizenFilter();

		this.Items = Enumerable.Empty<Citizen>().AsQueryable();

		await Grid.RefreshDataAsync();
	}



	private async Task ShowCitizen(long citizenId)
	{
		var citizen = await this.RegistryService.Citizens.SingleOrDefaultAsync(x => x.Id == citizenId);

		if(citizen != null)
		{
			await citizenModal.ShowAsync<Citizens.Detail>("INDIVIDI", "Te dhenat personale te shtetasit.", new Dictionary<string, object>()
			{
				{ "Citizen", citizen }
			});
		}
	}

	private async Task ShowFamily(long citizenId)
	{
		var familyId = await this.RegistryService.Families
			.SelectMany(x => x.Members)
			.Where(x => x.Id == citizenId)
			.Select(x => x.OwnerId)
			.SingleOrDefaultAsync();

		if(familyId != default)
		{
			await familyModal.ShowAsync<Families.Detail>("FAMILJA", "Te dhenat familjare te shtetasit.", new Dictionary<string, object>()
			{
				{ "FamilyId", familyId }
			});
		}
	}
}
